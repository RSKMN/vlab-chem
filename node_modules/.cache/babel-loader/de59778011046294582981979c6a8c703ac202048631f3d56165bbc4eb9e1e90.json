{"ast":null,"code":"var _jsxFileName = \"/media/rskmn/D864320D6431EF3E/rskmn/theBendu/hackathons/felicity@iiith/git/vlab-chem/src/components/ChemistryWorkspace.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// 1) Define your known apparatus and chemicals\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst KNOWN_APPARATUS = {\n  \"Beaker\": {\n    id: \"beaker\",\n    name: \"Beaker\",\n    image: \"/images/beaker.png\",\n    color: \"#888\"\n  },\n  \"Flask\": {\n    id: \"flask\",\n    name: \"Flask\",\n    image: \"/images/flask.png\",\n    color: \"#bbb\"\n  }\n  // Add more if needed...\n};\nconst KNOWN_CHEMICALS = {\n  \"HCl\": {\n    id: \"hcl\",\n    name: \"HCl\",\n    color: \"#ff0000\"\n  },\n  \"NaOH\": {\n    id: \"naoh\",\n    name: \"NaOH\",\n    color: \"#00ff00\"\n  },\n  \"Water\": {\n    id: \"water\",\n    name: \"Water\",\n    color: \"#0000ff\"\n  }\n  // Add more if needed...\n};\nconst ChemistryWorkspace = ({\n  experiment\n}) => {\n  _s();\n  const [parsedSteps, setParsedSteps] = useState([]);\n  useEffect(() => {\n    if (!experiment || !experiment.steps) {\n      setParsedSteps([]);\n      return;\n    }\n\n    // 2) Merge user steps with known items\n    const updatedSteps = experiment.steps.map((step, index) => {\n      // If it's an apparatus step, see if we know it\n      if (step.action === \"bringApparatus\") {\n        const known = KNOWN_APPARATUS[step.name];\n        if (known) {\n          // Override with known apparatus data\n          return {\n            ...step,\n            name: known.name,\n            color: known.color,\n            image: known.image,\n            id: known.id\n          };\n        } else {\n          // If not known, just use the step as is\n          return step;\n        }\n      }\n      // If it's a chemical step, see if we know it\n      else if (step.action === \"addChemical\") {\n        const known = KNOWN_CHEMICALS[step.chemical];\n        if (known) {\n          // Override with known chemical data\n          return {\n            ...step,\n            chemical: known.name,\n            color: known.color,\n            id: known.id\n          };\n        } else {\n          // Keep the original if unknown\n          return step;\n        }\n      }\n      // For other actions, just pass them through\n      return step;\n    });\n    setParsedSteps(updatedSteps);\n  }, [experiment]);\n\n  // 3) Render the merged steps\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chemistry-workspace\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chemistry Lab Workspace (Simulation Mode)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), parsedSteps.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No steps found in this experiment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : parsedSteps.map((step, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Action:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), \" \", step.action, step.action === \"bringApparatus\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Apparatus:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }, this), \" \", step.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), step.image && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: step.image,\n          alt: step.name,\n          style: {\n            width: 100,\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true), step.action === \"addChemical\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Chemical:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 19\n          }, this), \" \", step.chemical]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), step.amount && step.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this), \" \", step.amount, step.unit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true), step.color && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Color:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            display: \"inline-block\",\n            width: 16,\n            height: 16,\n            backgroundColor: step.color,\n            marginLeft: 4\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(ChemistryWorkspace, \"eEiNZoLlz329R7i2ByxbHttseR8=\");\n_c = ChemistryWorkspace;\nexport default ChemistryWorkspace;\nvar _c;\n$RefreshReg$(_c, \"ChemistryWorkspace\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","KNOWN_APPARATUS","id","name","image","color","KNOWN_CHEMICALS","ChemistryWorkspace","experiment","_s","parsedSteps","setParsedSteps","steps","updatedSteps","map","step","index","action","known","chemical","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","idx","style","marginBottom","src","alt","width","height","amount","unit","display","backgroundColor","marginLeft","_c","$RefreshReg$"],"sources":["/media/rskmn/D864320D6431EF3E/rskmn/theBendu/hackathons/felicity@iiith/git/vlab-chem/src/components/ChemistryWorkspace.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// 1) Define your known apparatus and chemicals\nconst KNOWN_APPARATUS = {\n  \"Beaker\": {\n    id: \"beaker\",\n    name: \"Beaker\",\n    image: \"/images/beaker.png\",\n    color: \"#888\"\n  },\n  \"Flask\": {\n    id: \"flask\",\n    name: \"Flask\",\n    image: \"/images/flask.png\",\n    color: \"#bbb\"\n  },\n  // Add more if needed...\n};\n\nconst KNOWN_CHEMICALS = {\n  \"HCl\": {\n    id: \"hcl\",\n    name: \"HCl\",\n    color: \"#ff0000\"\n  },\n  \"NaOH\": {\n    id: \"naoh\",\n    name: \"NaOH\",\n    color: \"#00ff00\"\n  },\n  \"Water\": {\n    id: \"water\",\n    name: \"Water\",\n    color: \"#0000ff\"\n  },\n  // Add more if needed...\n};\n\nconst ChemistryWorkspace = ({ experiment }) => {\n  const [parsedSteps, setParsedSteps] = useState([]);\n\n  useEffect(() => {\n    if (!experiment || !experiment.steps) {\n      setParsedSteps([]);\n      return;\n    }\n\n    // 2) Merge user steps with known items\n    const updatedSteps = experiment.steps.map((step, index) => {\n      // If it's an apparatus step, see if we know it\n      if (step.action === \"bringApparatus\") {\n        const known = KNOWN_APPARATUS[step.name];\n        if (known) {\n          // Override with known apparatus data\n          return {\n            ...step,\n            name: known.name,\n            color: known.color,\n            image: known.image,\n            id: known.id\n          };\n        } else {\n          // If not known, just use the step as is\n          return step;\n        }\n      }\n      // If it's a chemical step, see if we know it\n      else if (step.action === \"addChemical\") {\n        const known = KNOWN_CHEMICALS[step.chemical];\n        if (known) {\n          // Override with known chemical data\n          return {\n            ...step,\n            chemical: known.name,\n            color: known.color,\n            id: known.id\n          };\n        } else {\n          // Keep the original if unknown\n          return step;\n        }\n      }\n      // For other actions, just pass them through\n      return step;\n    });\n\n    setParsedSteps(updatedSteps);\n  }, [experiment]);\n\n  // 3) Render the merged steps\n  return (\n    <div className=\"chemistry-workspace\">\n      <h2>Chemistry Lab Workspace (Simulation Mode)</h2>\n      {parsedSteps.length === 0 ? (\n        <p>No steps found in this experiment.</p>\n      ) : (\n        parsedSteps.map((step, idx) => (\n          <div key={idx} style={{ marginBottom: \"1rem\" }}>\n            <strong>Action:</strong> {step.action}\n            {step.action === \"bringApparatus\" && (\n              <>\n                <p>\n                  <strong>Apparatus:</strong> {step.name}\n                </p>\n                {/* Show apparatus image if defined */}\n                {step.image && (\n                  <img\n                    src={step.image}\n                    alt={step.name}\n                    style={{ width: 100, height: \"auto\" }}\n                  />\n                )}\n              </>\n            )}\n            {step.action === \"addChemical\" && (\n              <>\n                <p>\n                  <strong>Chemical:</strong> {step.chemical}\n                </p>\n                {step.amount && step.unit && (\n                  <p>\n                    <strong>Amount:</strong> {step.amount}\n                    {step.unit}\n                  </p>\n                )}\n              </>\n            )}\n            {/* Show color or other step info if needed */}\n            {step.color && (\n              <p>\n                <strong>Color:</strong>{\" \"}\n                <span\n                  style={{\n                    display: \"inline-block\",\n                    width: 16,\n                    height: 16,\n                    backgroundColor: step.color,\n                    marginLeft: 4\n                  }}\n                />\n              </p>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ChemistryWorkspace;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}